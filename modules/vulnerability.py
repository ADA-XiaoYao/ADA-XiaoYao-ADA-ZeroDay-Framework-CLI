"""
漏洞管理模块
负责漏洞信息的增删改查和管理
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
import json

class VulnerabilityManager:
    """漏洞管理类"""
    
    def __init__(self, database=None, logger=None):
        self.database = database
        self.logger = logger
    
    def create_vulnerability(self, data: Dict[str, Any], user_id: int) -> Optional[int]:
        """创建新漏洞"""
        try:
            vuln_data = {
                'title': data.get('title', ''),
                'cve_id': data.get('cve_id'),
                'description': data.get('description', ''),
                'severity': data.get('severity', 'medium'),
                'cvss_score': data.get('cvss_score'),
                'affected_systems': data.get('affected_systems', ''),
                'discovery_date': data.get('discovery_date'),
                'disclosure_date': data.get('disclosure_date'),
                'patch_available': data.get('patch_available', False),
                'patch_url': data.get('patch_url', ''),
                'references': json.dumps(data.get('references', [])),
                'tags': json.dumps(data.get('tags', [])),
                'status': data.get('status', 'new'),
                'created_by': user_id,
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            vuln_id = self.database.insert_record('vulnerabilities', vuln_data)
            
            if vuln_id and self.logger:
                self.logger.log_user_action(
                    f"user_{user_id}", 
                    "create_vulnerability", 
                    f"Created vulnerability: {data.get('title', 'Unknown')}"
                )
            
            return vuln_id
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"创建漏洞失败: {e}")
            return None
    
    def get_vulnerability(self, vuln_id: int) -> Optional[Dict[str, Any]]:
        """获取漏洞详情"""
        try:
            vuln = self.database.get_record_by_id('vulnerabilities', vuln_id)
            if vuln:
                vuln_dict = dict(vuln)
                # 解析JSON字段
                vuln_dict['references'] = json.loads(vuln_dict.get('references', '[]'))
                vuln_dict['tags'] = json.loads(vuln_dict.get('tags', '[]'))
                return vuln_dict
            return None
        except Exception as e:
            if self.logger:
                self.logger.error(f"获取漏洞失败: {e}")
            return None
    
    def update_vulnerability(self, vuln_id: int, data: Dict[str, Any], user_id: int) -> bool:
        """更新漏洞信息"""
        try:
            # 准备更新数据
            update_data = {}
            
            for key in ['title', 'cve_id', 'description', 'severity', 'cvss_score', 
                       'affected_systems', 'discovery_date', 'disclosure_date', 
                       'patch_available', 'patch_url', 'status']:
                if key in data:
                    update_data[key] = data[key]
            
            if 'references' in data:
                update_data['references'] = json.dumps(data['references'])
            
            if 'tags' in data:
                update_data['tags'] = json.dumps(data['tags'])
            
            update_data['updated_at'] = datetime.now().isoformat()
            
            success = self.database.update_record('vulnerabilities', vuln_id, update_data)
            
            if success and self.logger:
                self.logger.log_user_action(
                    f"user_{user_id}", 
                    "update_vulnerability", 
                    f"Updated vulnerability ID: {vuln_id}"
                )
            
            return success
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"更新漏洞失败: {e}")
            return False
    
    def delete_vulnerability(self, vuln_id: int, user_id: int) -> bool:
        """删除漏洞"""
        try:
            success = self.database.delete_record('vulnerabilities', vuln_id)
            
            if success and self.logger:
                self.logger.log_user_action(
                    f"user_{user_id}", 
                    "delete_vulnerability", 
                    f"Deleted vulnerability ID: {vuln_id}"
                )
            
            return success
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"删除漏洞失败: {e}")
            return False
    
    def list_vulnerabilities(self, filters: Dict[str, Any] = None, 
                           limit: int = 50, offset: int = 0) -> List[Dict[str, Any]]:
        """获取漏洞列表"""
        try:
            query = "SELECT * FROM vulnerabilities WHERE 1=1"
            params = []
            
            if filters:
                if 'severity' in filters:
                    query += " AND severity = ?"
                    params.append(filters['severity'])
                
                if 'status' in filters:
                    query += " AND status = ?"
                    params.append(filters['status'])
                
                if 'cve_id' in filters:
                    query += " AND cve_id LIKE ?"
                    params.append(f"%{filters['cve_id']}%")
                
                if 'keyword' in filters:
                    query += " AND (title LIKE ? OR description LIKE ?)"
                    keyword = f"%{filters['keyword']}%"
                    params.extend([keyword, keyword])
            
            query += " ORDER BY created_at DESC LIMIT ? OFFSET ?"
            params.extend([limit, offset])
            
            results = self.database.execute_query(query, tuple(params))
            
            vulnerabilities = []
            for vuln in results:
                vuln_dict = dict(vuln)
                # 解析JSON字段
                vuln_dict['references'] = json.loads(vuln_dict.get('references', '[]'))
                vuln_dict['tags'] = json.loads(vuln_dict.get('tags', '[]'))
                vulnerabilities.append(vuln_dict)
            
            return vulnerabilities
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"获取漏洞列表失败: {e}")
            return []
    
    def search_vulnerabilities(self, keyword: str, limit: int = 20) -> List[Dict[str, Any]]:
        """搜索漏洞"""
        try:
            query = """
                SELECT * FROM vulnerabilities 
                WHERE title LIKE ? OR description LIKE ? OR cve_id LIKE ?
                ORDER BY created_at DESC LIMIT ?
            """
            search_term = f"%{keyword}%"
            params = (search_term, search_term, search_term, limit)
            
            results = self.database.execute_query(query, params)
            
            vulnerabilities = []
            for vuln in results:
                vuln_dict = dict(vuln)
                vuln_dict['references'] = json.loads(vuln_dict.get('references', '[]'))
                vuln_dict['tags'] = json.loads(vuln_dict.get('tags', '[]'))
                vulnerabilities.append(vuln_dict)
            
            return vulnerabilities
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"搜索漏洞失败: {e}")
            return []
    
    def get_vulnerability_stats(self) -> Dict[str, Any]:
        """获取漏洞统计信息"""
        try:
            stats = {}
            
            # 总数统计
            total_result = self.database.execute_query("SELECT COUNT(*) as count FROM vulnerabilities")
            stats['total'] = total_result[0]['count'] if total_result else 0
            
            # 按严重程度统计
            severity_query = """
                SELECT severity, COUNT(*) as count 
                FROM vulnerabilities 
                GROUP BY severity
            """
            severity_results = self.database.execute_query(severity_query)
            stats['by_severity'] = {row['severity']: row['count'] for row in severity_results}
            
            # 按状态统计
            status_query = """
                SELECT status, COUNT(*) as count 
                FROM vulnerabilities 
                GROUP BY status
            """
            status_results = self.database.execute_query(status_query)
            stats['by_status'] = {row['status']: row['count'] for row in status_results}
            
            # 最近添加的漏洞数量（7天内）
            recent_query = """
                SELECT COUNT(*) as count 
                FROM vulnerabilities 
                WHERE created_at >= date('now', '-7 days')
            """
            recent_result = self.database.execute_query(recent_query)
            stats['recent_7_days'] = recent_result[0]['count'] if recent_result else 0
            
            return stats
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"获取漏洞统计失败: {e}")
            return {}
    
    def get_vulnerabilities_by_severity(self, severity: str) -> List[Dict[str, Any]]:
        """根据严重程度获取漏洞"""
        return self.list_vulnerabilities({'severity': severity})
    
    def get_vulnerabilities_by_status(self, status: str) -> List[Dict[str, Any]]:
        """根据状态获取漏洞"""
        return self.list_vulnerabilities({'status': status})
    
    def update_vulnerability_status(self, vuln_id: int, status: str, user_id: int) -> bool:
        """更新漏洞状态"""
        return self.update_vulnerability(vuln_id, {'status': status}, user_id)
    
    def add_vulnerability_tag(self, vuln_id: int, tag: str, user_id: int) -> bool:
        """为漏洞添加标签"""
        try:
            vuln = self.get_vulnerability(vuln_id)
            if not vuln:
                return False
            
            tags = vuln.get('tags', [])
            if tag not in tags:
                tags.append(tag)
                return self.update_vulnerability(vuln_id, {'tags': tags}, user_id)
            
            return True
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"添加漏洞标签失败: {e}")
            return False
    
    def remove_vulnerability_tag(self, vuln_id: int, tag: str, user_id: int) -> bool:
        """移除漏洞标签"""
        try:
            vuln = self.get_vulnerability(vuln_id)
            if not vuln:
                return False
            
            tags = vuln.get('tags', [])
            if tag in tags:
                tags.remove(tag)
                return self.update_vulnerability(vuln_id, {'tags': tags}, user_id)
            
            return True
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"移除漏洞标签失败: {e}")
            return False

